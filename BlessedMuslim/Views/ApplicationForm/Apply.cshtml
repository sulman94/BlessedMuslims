@model BlessedMuslim.Models.DsrApplicationForm;

@{
    Layout = "~/Views/Shared/_LayoutApplicant.cshtml";
    ViewData["Title"] = "Application Form";
}

<div class="row">
    <h2 class="m-auto">Sales Representative Application Form</h2>
</div>
@using (Html.BeginForm(FormMethod.Post, new { enctype = "multipart/form-data",id = "applyForm"  }))
{
    @Html.AntiForgeryToken()
<div class="form-horizontal">
    <br />
    <div class="row">

        <div class="col-12 col-md-6">
            <div class="input-group input-group-sm mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text width-100" id="inputGroup-sizing-sm">Upload Photo</span>
                </div>
                <input type="file" title="Upload Photo" name="files" onchange="show(this,'user_img')" accept="image/*" />

            </div>
        </div>
        <div class="col-12 col-md-6">
            <div class="input-group input-group-sm mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text width-100" id="inputGroup-sizing-sm">Upload ID</span>
                </div>
                <input type="file" title="Upload ID" name="Documents" onchange="show(this,'user_Doc')" accept="image/*" />

            </div>
        </div>

        @*<div class="col-12 col-md-1">
                <div class="input-group input-group-sm mb-3">
                    <a id="AddNewVehicle" class="btn btn-dark" style="color: #ffc107">
                        <i class="fa fa-plus"></i>
                    </a>
                </div>
            </div>*@

        <div class="col-12 col-md-6">
            <div class="input-group input-group-sm mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text width-100" id="inputGroup-sizing-sm">First Name</span>
                </div>
                @Html.EditorFor(model => model.FirstName, new
           {
               htmlAttributes =
                new { @class = "form-control alphabets-only", required = "required", maxlength = 50 }
           })
                @Html.ValidationMessageFor(model => model.FirstName)
            </div>
        </div>
        <div class="col-12 col-md-6">
            <div class="input-group input-group-sm mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text width-100" id="inputGroup-sizing-sm">Last Name</span>
                </div>
                @Html.EditorFor(model => model.LastName, new
           {
               htmlAttributes =
                new { @class = "form-control alphabets-only", required = "required", maxlength = 50 }
           })
                @Html.ValidationMessageFor(model => model.LastName)
            </div>
        </div>
        <div class="col-12 col-md-6">
            <div class="input-group input-group-sm mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text width-100" id="inputGroup-sizing-sm">Gender</span>
                </div>

                @Html.DropDownListFor(model => model.Gender, new List<SelectListItem>{
    new SelectListItem{ Text="Male", Value="Male"},
    new SelectListItem{ Text="Female", Value="Female"}
    }, "--- Select Gender ---", new { @class = "form-control", required = "required" })

            </div>
        </div>

        <div class="col-12 col-md-6">
            <div class="input-group input-group-sm mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text width-100" id="inputGroup-sizing-sm">Date Of Birth</span>
                </div>
                @Html.EditorFor(model => model.Dob, new
           {
               htmlAttributes =
                new { @class = "form-control", required = "required", type = "date" }
           })

            </div>
            <span id="DateOfBirthVal" class="text-danger">Please enter Date Of Birth.</span>
        </div>
        <div class="col-12 col-md-6">
            <div class="input-group input-group-sm mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text width-100" id="inputGroup-sizing-sm">Contact Number</span>
                </div>
                @Html.EditorFor(model => model.ContactNumber, new
           {
               htmlAttributes =
                new { @class = "form-control numbers-only", required = "required", minlength = 11, maxlength = 20 }
           })
                @Html.ValidationMessageFor(model => model.ContactNumber)

            </div>
        </div>
        <div class="col-12 col-md-6">
            <div class="input-group input-group-sm mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text width-100" id="inputGroup-sizing-sm">Interested Area</span>
                </div>
                @Html.DropDownListFor(model => model.AreaId, (IEnumerable<SelectListItem>)ViewBag.AreaId, "--- Select Your Area ---", new { @class = "form-control", required = "required" })

            </div>
        </div>
        <div class="col-12 col-md-6">
            <div class="input-group input-group-sm mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text width-100" id="inputGroup-sizing-sm">Email</span>
                </div>
                @Html.EditorFor(model => model.Email, new
           {
               htmlAttributes =
                new { @class = "form-control", required = "required" }
           })

            </div>
        </div>
        <div class="col-12 col-md-6">
            <div class="input-group input-group-sm mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text width-100" id="inputGroup-sizing-sm">Post Code</span>
                </div>
                @Html.EditorFor(model => model.PostCode, new
           {
               htmlAttributes =
                new { @class = "form-control", required = "required" }
           })

            </div>
        </div>
        @*<div class="col-12 col-md-6">
                <div class="input-group input-group-sm mb-3">
                    <div class="input-group-prepend">
                        <span class="input-group-text width-100" id="inputGroup-sizing-sm">Confirm Email</span>
                    </div>
                    @Html.EditorFor(model => model.ConfirmEmail, new
               {
                   htmlAttributes =
                    new { @class = "form-control", required = "required"}
               })
                </div>
            </div>*@

        <div class="col-12 col-md-12">
            <div class="input-group input-group-sm mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text width-100" id="inputGroup-sizing-sm">Address Line 1</span>
                </div>
                @Html.EditorFor(model => model.AddressLine1, new
           {
               htmlAttributes =
                new { @class = "form-control", required = "required" }
           })

            </div>
        </div>
        <div class="col-12 col-md-12">
            <div class="input-group input-group-sm mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text width-100" id="inputGroup-sizing-sm">Address Line 2</span>
                </div>
                @Html.EditorFor(model => model.AddressLine2, new
           {
               htmlAttributes =
                new { @class = "form-control", required = "required" }
           })

            </div>
        </div>

        

        <div class="col-12 col-md-6">
        </div>

        <div class="col-12 col-md-12">
            <a href="#" data-toggle="modal" data-target="#myModal">Terms &amp; Conditions</a>

        </div>

        

        <div class="col-12 col-md-12">
            <div class="input-group input-group-sm mb-3">
                <div class="input-group-prepend" style="color: chocolate">
                    <i>
                        Once the application is submitted, sales rep. should receive a confirmation message and area manger should
                        also receive his application reference number so he can call him and set a meeting for interview. Only area
                        manager will decide if the applicant is suitable for the job.
                    </i>
                </div>
            </div>
        </div>

    </div>

    <div class="row">

        <div class="form-group float-left">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" value="Submit Application" class="btn btn-outline-danger" onclick="submitForm()"/>
            </div>
        </div>
    </div>


    @if (!string.IsNullOrEmpty(ViewBag.error))
    {
        <div class="mt-2">
            <div class="alert alert-danger" role="alert">
                @ViewBag.error
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(ViewBag.result))
    {
        <div class="mt-2">
            <div class="alert alert-success" role="alert">
                @ViewBag.result
            </div>
        </div>
    }

    <!-- Modal -->
    <div class="modal fade" id="myModal" role="dialog">
        <div class="modal-dialog">

            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Terms &amp; Conditions</h4>
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                </div>
                <div class="modal-body">
                    <div>@ViewBag.TermsAndConditions</div>
                    <br />
                    <div class="input-group input-group-sm mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text " id="inputGroup-sizing-sm">
                                @Html.CheckBoxFor(model => model.TermsAgreement, new
                      {
                          htmlAttributes =
                           new { @class = "form-control", required = "required" }
                      })
                            </span>I have read the terms and conditions and fully understood, I agree to the terms and condition to work as
                            a commition based seles representative for Blessed Muslim UK Ltd.
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            </div>

        </div>
    </div>

</div>
}

<style>
    .ui-autocomplete {
        max-height: 200px;
        overflow-y: auto;
        /* prevent horizontal scrollbar */
        overflow-x: hidden;
        /* add padding to account for vertical scrollbar */
        padding-right: 20px;
    }
</style>
<script src="~/js/DateOfBirthValidation.js" type="text/javascript"></script>
<script type="text/javascript">
    function show(input, id) {
        var fileTypes = ["Jpg", "png", "jpg", "jpeg", "PNG"];
        if (input.files && input.files[0]) {
            var filerdr = new FileReader();
            var extension = input.files[0].name.split('.').pop().toLowerCase();
            var isSuccess = fileTypes.indexOf(extension) > -1;
            if (isSuccess) {
                filerdr.onload = function (e) {
                    $('#' + id).attr('src', e.target.result);
                }
                filerdr.readAsDataURL(input.files[0]);
            }
            else {
                alert("Please select Image in this Format (Jpg,png,jpeg)");
            }
        }
        }

    function submitForm() {
        debugger;

       let text = $('#ContactNumber').val();
            let pattern = /^0[0-9]/;
            let result = text.match(pattern);

        if (result!= null && ('#TermsAgreement').prop("checked")) {
            if (!ValidateDateOfBirth(val)) {
                $('#DateOfBirthVal').text("Please select age above 18 Years");
                $('#DateOfBirthVal').show();
            } else {
                $('#applyForm').submit();
            }
        }
        else {
            alert('Please read and agree terms and conditions!');
        }
        }
    $('#DateOfBirthVal').hide();
    $("#PostCode").autocomplete({  
           source: function(request,response) {  
               $.ajax({  
                   url: "/ApplicationForm/SearchPostalCode",  
                   type: "POST",  
                   dataType: "json",  
                   data: { Prefix: request.term },  
                   success: function (data) {  
                       debugger;
                       response($.map(data, function (item) {
                           return { label: item.text, value: item.value };  
                       }))  
  
                   }  
               })  
           },  
           messages: {  
               noResults: "", results: ""  
           }  
       });

       $('#Dob').change(function () {
        debugger
            
        var val = $(this).val();
        if (val == '') {
            $('#DateOfBirthVal').show();

        } else {
            if (!ValidateDateOfBirth(val)) {
                $('#DateOfBirthVal').text("Please select age above 18 Years");
                $('#DateOfBirthVal').show();
            } else {
                $('#DateOfBirthVal').hide();
            }
        }
    });

//document.ready(){
//    const regex = "^0+[0-9]+";
//    $("#ContactNumber").on("change", function() {
//        return this.match(regex);
//    });
//}
    //function confirmEmail() {
    //    var email = document.getElementById("Email").value
    //    var confemail = document.getElementById("ConfirmEmail").value
    //    if (email != confemail) {
    //        alert('Email Not Matching!');
    //    }
    //}
</script>